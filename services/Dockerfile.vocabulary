FROM python:3.12-slim

WORKDIR /app

ARG SERVICE_NAME=vocabulary

# ----------------------------
# 1. System & build tooling
# ----------------------------
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc \
        python3-dev \
    && rm -rf /var/lib/apt/lists/*

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    POETRY_VIRTUALENVS_CREATE=false \
    POETRY_NO_INTERACTION=1

# Install Poetry (locked to a specific version for reproducibility)
RUN pip install --no-cache-dir "poetry==1.8.2"

# ----------------------------
# 2. Dependency installation
# ----------------------------
# Copy the shared common package first so path dependencies resolve
COPY common /app/common

# Copy only the dependency files first to leverage Docker layer caching
COPY services/${SERVICE_NAME}/pyproject.toml  /app/services/${SERVICE_NAME}/pyproject.toml

# Install Python dependencies defined by Poetry
RUN cd /app/services/${SERVICE_NAME} && poetry install --no-dev --no-ansi

# Run as non-root user
RUN useradd -m appuser && chown -R appuser:appuser /app
USER appuser

# Download & cache nltk language files, which are large
RUN cd /app/services/${SERVICE_NAME} && poetry run python -c "import nltk; \
    nltk.download('punkt'); \
    nltk.download('punkt_tab'); \
    nltk.download('averaged_perceptron_tagger'); \
    nltk.download('averaged_perceptron_tagger_eng'); \
    nltk.download('wordnet'); \
    nltk.download('words'); \
    nltk.download('omw-1.4')"

# ----------------------------
# 3. Copy service source code
# ----------------------------
COPY services/${SERVICE_NAME} /app/services/${SERVICE_NAME}
RUN rm -f /app/services/${SERVICE_NAME}/.env

# Run the service
WORKDIR /app/services/${SERVICE_NAME}
CMD ["poetry", "run", "python", "src/main.py"]
